{"version":3,"sources":["Modal/Modal.js","QuestionCreator/NewChoice.js","QuestionCreator/NewOpen.js","QuestionCreator/NewImage.js","QuestionCreator/NewQuestion.js","Question/Question.js","QuestionList/QuestionList.js","ShareModalContent.js","CollapsibleButton.js","LoadSurveyModal.js","App.js","Survey/OneImage.js","Survey/ImageQuestion.js","Survey/MultiQuestion.js","Survey/OpenQuestion.js","Survey/List.js","Survey/Survey.js","Results/Image.js","Results/CloseQuestionResult.js","Results/OpenQuestionResult.js","Results/Results.js","index.js"],"names":["Modal","children","closeModal","closeable","ReactDOM","createPortal","className","onClick","document","body","NewChoice","setAnswers","title","useState","answersLetters","setAnswersLetters","ansLimitError","setAnsLimitError","currentInput","setCurrentInput","answers","map","ans","index","type","id","name","onChange","e","target","value","autoComplete","placeholder","everythingCorrect","useCallback","button","getElementsByClassName","inputs","correct","Array","from","forEach","input","removeAttribute","classList","remove","setAttribute","add","useEffect","length","charAt","console","log","prev","next","pop","push","saveAllAnswers","NewOpen","handleCloseModal","disabled","NewImage","photoMap","setPhotoMap","currentSource","setCurrentSource","photos","setPhotos","error","setError","reader","FileReader","temp","slice","thumbnails","photo","src","alt","htmlFor","style","display","accept","file","getElementById","files","onload","result","readAsDataURL","ansIds","Math","floor","random","set","saveAnswers","NewQuestion","addQuestion","setTitle","questionType","setQuestionType","titleBoxVisible","setTitleBoxVisible","onSubmit","question","possibleAnswers","event","substring","querySelectorAll","node","checked","Question","alphabet","toUpperCase","get","height","QuestionList","questions","displayList","setDisplayList","questionsList","ShareModalContent","surveyId","window","location","host","readOnly","copyText","select","setSelectionRange","navigator","clipboard","writeText","backgroundColor","marginInline","pngUrl","toDataURL","replace","downloadLink","createElement","href","download","appendChild","click","removeChild","CollapsibleButton","buttonText","coll","toggle","content","nextElementSibling","LoadSurveyModal","setShowLoadSurveyModal","surveyCode","setSurveyCode","captchaValid","setCaptchaValid","setSurveyId","showErrorMessage","setShowError","recaptchaRef","useRef","code","axios","then","res","data","catch","current","reset","ref","sitekey","response","post","to","color","state","App","surveyQuestions","setSurveyQuestions","showAddQuestionBox","setShowAddQuestionBox","surveyTitle","setSurveyTitle","surveyDescription","setSurveyDescription","description","survey","setSurvey","Map","showFinishModal","setShowFinishModal","showLoadSurveyModal","prevSurvey","postSurveyCode","key","postImage","base64Image","imageId","maxLength","onInput","str","confirm","reload","prevQuestions","OneImage","answer","handleCheckboxClick","source","setSource","ImageQuestion","questionIndex","choices","setChoices","useParams","fill","checkboxAnswers","setCheckboxAnswers","arr","tempArr","choicesArr","MultiQuestion","ind","OpenQuestion","answerInput","setAnswerInput","List","questionElems","Survey","setQuestions","showModal","setShowModal","showQuestions","setShowQuestions","answersSent","setAnswersSent","getSurvey","allAnswersFilled","isArray","checkIfArrayIsAllNulls","checkIfAllWhitespaces","isAllWhitespaces","char","isNull","item","grecaptcha","answerSet","Image","answersCount","totalVotes","labels","toFixed","CloseQuestionResult","setAnswersCount","setPossibleAnswers","setTotalVotes","undefined","answersCountArray","k","label","i","j","sum","datasets","hoverBackgroundColor","hoverOffset","possibleAns","options","text","fontSize","legend","position","responsive","layout","padding","bottom","OpenQuestionResult","answersArray","setAnswersArray","answerList","Results","showResults","setShowResults","results","setResults","finalAnswers","setFinalAnswers","fetchData","setFetchData","setId","setCode","useLocation","showDeletionModal","setShowDeletionModal","imageIds","setImageIds","deletionCompleted","setDeletionCompleted","showShareModal","setShowShareModal","fetchAnswers","answerDocuments","makeAnswersArray","newAnswers","numberOfQuestions","createResults","storeImageIds","oldImageIds","delete","render","StrictMode","path","element"],"mappings":"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","file":"static/js/main.eb4768c8.chunk.js","sourcesContent":["import './Modal.css'\r\nimport ReactDOM from 'react-dom'\r\n\r\nexport default function Modal({ children, closeModal, closeable }) {\r\n\r\n  return ReactDOM.createPortal((\r\n    <div className=\"modal-backdrop\">\r\n      <div className=\"modal\">\r\n        <div className=\"modal-content\">\r\n          {closeable !== false ? (<button className='close-button' onClick={closeModal}>X</button>) : null}\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  ), document.body)\r\n}\r\n","import { useState, useEffect, Fragment, useCallback } from \"react\"\r\nimport './NewChoice.css'\r\n\r\nexport default function NewChoice({ setAnswers, title }) {\r\n\r\n    const [answersLetters, setAnswersLetters] = useState([\"A\", \"B\"])\r\n    const alphabet = \"abcdefgh\"\r\n    const [ansLimitError, setAnsLimitError] = useState(false)\r\n\r\n    const [currentInput, setCurrentInput] = useState(null)\r\n\r\n    const addNewAnswer = () => {\r\n        if (answersLetters.length < 8) {\r\n            setAnsLimitError(false)\r\n            setAnswersLetters([...answersLetters, alphabet.charAt(answersLetters.length)])\r\n        } else {\r\n            setAnsLimitError(true)\r\n        }\r\n    }\r\n\r\n    const deleteLastAnswer = () => {\r\n        console.log(answersLetters)\r\n        if (answersLetters.length > 2) {\r\n            //proper way to delete array item in state:\r\n            setAnswersLetters((prev) => {\r\n                const next = [...prev]\r\n                next.pop()\r\n                return next\r\n            })\r\n            setAnsLimitError(false)\r\n        } else {\r\n            setAnsLimitError(true)\r\n        }\r\n    }\r\n\r\n    const saveAllAnswers = () => {\r\n        const answers = []\r\n        let inputs = document.getElementsByClassName('answer-input')\r\n        Array.from(inputs).forEach((input) => {\r\n            if (input.value !== '') answers.push(input.value)\r\n        })\r\n        setAnswers(answers)\r\n    }\r\n\r\n    const answers = answersLetters.map((ans, index) => {\r\n        return (\r\n            <div key={index}>\r\n                <input\r\n                    className=\"answer-input\"\r\n                    type=\"text\"\r\n                    id={\"answer\" + index}\r\n                    name=\"answer\"\r\n                    onChange={(e) => setCurrentInput(e.target.value)}\r\n                    autoComplete=\"off\"\r\n                    placeholder=\"Answer\"\r\n                />\r\n            </div>\r\n        )\r\n    })\r\n\r\n    const everythingCorrect = useCallback(\r\n        () => {\r\n            let button = document.getElementsByClassName(\"add-question-btn\")[0]\r\n            let inputs = document.getElementsByClassName('answer-input')\r\n            let correct = true\r\n            Array.from(inputs).forEach((input) => {\r\n                if (input.value === '') correct = false\r\n            })\r\n            if (correct && title !=='') {\r\n                button.removeAttribute(\"disabled\", \"\")\r\n                button.classList.remove(\"disabled-button\")\r\n            }\r\n            else {\r\n                button.setAttribute(\"disabled\", \"\")\r\n                button.classList.add(\"disabled-button\")\r\n            }\r\n        },\r\n        [title],\r\n    )\r\n\r\n    useEffect(() => {\r\n        everythingCorrect()\r\n    }, [currentInput, answersLetters, title, everythingCorrect])\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"new-choice-box\">\r\n                <div className=\"answers-box\">\r\n                    {answers}\r\n                </div>\r\n                <div className=\"add-delete-buttons\">\r\n                    <span onClick={addNewAnswer}>+</span>\r\n                    <span onClick={deleteLastAnswer}>-</span>\r\n                </div>\r\n                {ansLimitError && (\r\n                    <p>Cannot do that</p>\r\n                )}\r\n            </div>\r\n            <button className=\"add-question-btn\" onClick={() => saveAllAnswers()}>Save</button>\r\n        </Fragment>\r\n    )\r\n}\r\n","import { useEffect } from 'react'\r\nimport './NewOpen.css'\r\n\r\nexport default function NewOpen({ handleCloseModal, title }) {\r\n\r\n    useEffect(() => {\r\n        let button = document.getElementsByClassName(\"add-question-btn\")[0]\r\n        if (title !== '') {\r\n            button.removeAttribute(\"disabled\", \"\")\r\n            button.classList.remove(\"disabled-button\")\r\n        }\r\n        else {\r\n            button.setAttribute(\"disabled\", \"\")\r\n            button.classList.add(\"disabled-button\")\r\n        }\r\n    }, [title])\r\n\r\n    return (\r\n        <div>\r\n            <textarea disabled id=\"answerBox\" placeholder='Interviewees will answer here' name=\"answerBox\" />\r\n            <button className=\"add-question-btn\" onClick={handleCloseModal}>Save</button>\r\n        </div>\r\n    )\r\n}\r\n","import { useState, useEffect, useCallback } from \"react\"\r\nimport './NewImage.css'\r\n\r\nexport default function NewImage({ setAnswers, photoMap, setPhotoMap, title }) {\r\n\r\n    const [currentSource, setCurrentSource] = useState(null)\r\n    const [photos, setPhotos] = useState([])\r\n    const alphabet = \"abcdefghijkl\"\r\n    const [error, setError] = useState(false)\r\n\r\n    const reader = new FileReader()\r\n\r\n    const handleImageUpload = () => {\r\n        const file = document.getElementById(\"file-input\").files[0]\r\n        reader.onload = (e) => {\r\n            setCurrentSource(e.target.result)\r\n        }\r\n        reader.readAsDataURL(file)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (currentSource !== null) {\r\n            let temp = photos.slice()\r\n            temp.push(currentSource)\r\n            setPhotos(temp)\r\n        }\r\n    }, [currentSource])\r\n\r\n    const saveAnswers = () => {\r\n        const ansIds = []\r\n        let map = photoMap\r\n        photos.forEach((photo) => {\r\n            let id = Math.floor(Math.random() * 100000)\r\n            map.set(id, photo)\r\n            //set (key, value)\r\n            ansIds.push(id)\r\n            //how to store photos and their names to save them in App.js and then be able to access? continue here<<<<<<<<<<<<<<<<\r\n            // Maybe key-value pairs, in Map? \r\n        })\r\n        setPhotoMap(map)\r\n        setAnswers(ansIds)\r\n    }\r\n\r\n\r\n    const thumbnails = photos.map((photo, index) => {\r\n        return (\r\n            <div key={index}>\r\n                <p>{alphabet.charAt(index)}</p>\r\n                <img className=\"photo\" src={photo} alt=\"answer thumbnail\" />\r\n            </div>\r\n        )\r\n    })\r\n\r\n    const saveQuestion = () => {\r\n        if (photos.length < 2) {\r\n            setError(true)\r\n        } else {\r\n            setError(false)\r\n            saveAnswers()\r\n        }\r\n    }\r\n\r\n    const everythingCorrect = useCallback(\r\n        () => {\r\n            let button = document.getElementsByClassName(\"add-question-btn\")[0]\r\n            if (photos.length >= 2 && title !== '') {\r\n                button.removeAttribute(\"disabled\", \"\")\r\n                button.classList.remove(\"disabled-button\")\r\n            }\r\n            else {\r\n                button.setAttribute(\"disabled\", \"\")\r\n                button.classList.add(\"disabled-button\")\r\n            }\r\n        },\r\n        [title, photos.length],\r\n    )\r\n\r\n\r\n    useEffect(() => {\r\n        everythingCorrect()\r\n    }, [photos, title, everythingCorrect])\r\n\r\n    return (\r\n        <div>\r\n            <label htmlFor=\"file-input\">\r\n                <span className=\"add-photo\">+</span>\r\n            </label>\r\n            <input\r\n                style={{ display: 'none' }}\r\n                type=\"file\"\r\n                accept=\"image/png, image/gif, image/jpeg\"\r\n                id=\"file-input\"\r\n                alt=\"file-input\"\r\n                onChange={handleImageUpload}>\r\n            </input>\r\n            <div className=\"photo-grid-container\">\r\n                {thumbnails}\r\n            </div>\r\n            {error && <p>Wrong number of photos</p>}\r\n            <button className=\"add-question-btn\" onClick={saveQuestion}>Save</button>\r\n        </div>\r\n    )\r\n}\r\n","import { useState } from 'react'\r\nimport NewChoice from './NewChoice'\r\nimport NewOpen from './NewOpen'\r\nimport NewImage from './NewImage'\r\nimport './NewQuestion.css'\r\n\r\nexport default function NewQuestion({ addQuestion, handleCloseModal, photoMap, setPhotoMap }) {\r\n\r\n    const [title, setTitle] = useState('')\r\n    const [questionType, setQuestionType] = useState(null)\r\n    const [answers, setAnswers] = useState([])\r\n    const [titleBoxVisible, setTitleBoxVisible] = useState(false)\r\n\r\n    const handleAddQuestion = () => {\r\n        const question = {\r\n            title: title,\r\n            possibleAnswers: answers,\r\n            type: questionType\r\n        }\r\n        console.log(\"Question title is: \" + question.title + \" and answers are: \" + question.possibleAnswers)\r\n        addQuestion(question)\r\n    }\r\n\r\n    const onChangeQuestionType = (event) => {\r\n        setQuestionType(event.target.value)\r\n        setTitleBoxVisible(true)\r\n    }\r\n\r\n    const resetInputs = () => {\r\n        setTitleBoxVisible(false)\r\n        setQuestionType(null)\r\n        var radio = document.querySelectorAll('input[type=radio]')\r\n        radio.forEach((node) => (node.checked = false))\r\n    }\r\n\r\n    return (\r\n        <div className=\"new-question-box\">\r\n            <form onSubmit={handleAddQuestion} className=\"new-question-form\">\r\n                <div className=\"radio-buttons\" onChange={onChangeQuestionType}>\r\n                    <label>\r\n                        <input type=\"radio\" name=\"question-type\" value=\"choice\"></input>\r\n                        <span>Multiple choice</span>\r\n                    </label>\r\n                    <label>\r\n                        <input type=\"radio\" name=\"question-type\" value=\"openQuestion\"></input>\r\n                        <span>Open</span>\r\n                    </label>\r\n                    <label>\r\n                        <input type=\"radio\" name=\"question-type\" value=\"imageQuestion\"></input>\r\n                        <span>Image</span>\r\n                    </label>\r\n                </div>\r\n                {titleBoxVisible &&\r\n                    <div>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"question\"\r\n                            name=\"question\"\r\n                            onChange={(e) => setTitle(e.target.value.substring(10, e.target.value.length))}\r\n                            value={\"Question: \" + title}\r\n                        />\r\n                    </div>\r\n                }\r\n                {\r\n                    {\r\n                        'choice': <NewChoice setAnswers={setAnswers} title={title} />,\r\n                        'openQuestion': <NewOpen handleCloseModal={handleCloseModal} title={title} />,\r\n                        'imageQuestion': <NewImage setAnswers={setAnswers} photoMap={photoMap} setPhotoMap={setPhotoMap} title={title} />\r\n                    }[questionType]\r\n                }\r\n                {questionType && (\r\n                    <div>\r\n                        <button className='reset-btn' onClick={resetInputs}>Reset</button>\r\n                    </div>\r\n                )}\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import './Question.css'\r\n\r\nexport default function Question({ question, photoMap }) {\r\n    const alphabet = \"abcdefghijkl\"\r\n    let type = \"\"\r\n\r\n    switch (question.type) {\r\n        case \"choice\":\r\n            type = \"Multiple choice\"\r\n            break;\r\n        case \"openQuestion\":\r\n            type = \"Open question\"\r\n            break;\r\n        case \"imageQuestion\":\r\n            type = \"Image choice\"\r\n            break;\r\n        default:\r\n            type = \"Question\"\r\n    }\r\n\r\n    const answers = question.possibleAnswers.map((ans, index) => {\r\n        switch (question.type) {\r\n            case \"choice\":\r\n                return <p key={index}>{alphabet.charAt(index).toUpperCase() + \":\" + ans}</p>\r\n            case \"imageQuestion\":\r\n                return (\r\n                    <div className='image-question-box' key={index}>\r\n                        <p>{alphabet.charAt(index).toUpperCase() + \":\"}</p>\r\n                        <img className='photo' src={photoMap.get(ans)} height=\"200\" alt=\"answer thumbnail\"/>\r\n                    </div>\r\n                )\r\n            default:\r\n                return <p>There is a problem</p>\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className=\"question-container\">\r\n            <p>Question: {question.title}</p>\r\n            <div className={`${(type === \"Image choice\") ? \"photo-choices-grid-container\" : \"\"}`}>\r\n                {answers}\r\n            </div>\r\n            <p>Type: {type}</p>\r\n        </div>\r\n    )\r\n\r\n    //add sth so that each answer has A, B, C etc.\r\n}\r\n\r\n\r\n","import { useState, useEffect } from 'react'\r\nimport Question from '../Question/Question'\r\nimport './QuestionList.css'\r\n\r\nexport default function QuestionList({ questions, photoMap}) {\r\n\r\n    const [displayList, setDisplayList] = useState(false)\r\n\r\n    useEffect(() => {\r\n        (questions.length > 0) ? setDisplayList(true) : setDisplayList(false)\r\n    }, [questions])\r\n\r\n\r\n    const questionsList = questions.map((question, index) => {\r\n        return <Question key={index} question={question} photoMap={photoMap} />\r\n    })\r\n\r\n    return (\r\n        <div className={\"list-container\"}>\r\n            {displayList ?  questionsList :  (<span className=\"empty-list-message\">Your journey of making a survey begins.<br/>It shall be a short one...</span>)}\r\n        </div>\r\n    )\r\n}\r\n","import QRCode from 'qrcode.react'\r\n\r\nexport default function ShareModalContent({ surveyId }) {\r\n\r\n    const downloadQrCode = () => {\r\n        const canvas = document.getElementById(\"qr-code\")\r\n        const pngUrl = canvas\r\n            .toDataURL(\"image/png\")\r\n            .replace(\"image/png\", \"http://www.\" + window.location.host + \"/survey/\" + surveyId)\r\n        let downloadLink = document.createElement(\"a\")\r\n        downloadLink.href = pngUrl\r\n        downloadLink.download = \"survey-qr.png\"\r\n        document.body.appendChild(downloadLink)\r\n        downloadLink.click()\r\n        document.body.removeChild(downloadLink)\r\n    }\r\n\r\n    const copyLink = () => {\r\n        let copyText = document.getElementById(\"survey-link-box\")\r\n        copyText.select()\r\n        copyText.setSelectionRange(0, 99999)\r\n        navigator.clipboard.writeText(copyText.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>Share your survey:</h3>\r\n            <input className=\"survey-link\" type=\"text\" value={window.location.host + \"/survey/\" + surveyId} id=\"survey-link-box\" readOnly></input>\r\n            <button className=\"copy-link-btn\" onClick={copyLink}>Copy link</button>\r\n            <br />\r\n            <QRCode id=\"qr-code\" value={\"http://www.\" + window.location.host + \"/survey/\" + surveyId} />\r\n            <button style={{backgroundColor: \"blue\", display: \"block\", marginInline: \"auto\"}} onClick={downloadQrCode}>Download QR code</button>\r\n        </div>\r\n    )\r\n}\r\n","import './CollapsibleButton.css'\r\n\r\nexport default function CollapsibleButton({ children, buttonText }) {\r\n\r\n    const onCollapse = () => {\r\n        var coll = document.getElementsByClassName(\"collapse-btn\")[0]\r\n        coll.classList.toggle(\"active\")\r\n        var content = coll.nextElementSibling\r\n        if (content.style.display === \"block\") {\r\n            content.style.display = \"none\"\r\n        } else {\r\n            content.style.display = \"block\"\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <button className=\"collapse-btn\" onClick={onCollapse}>{buttonText}</button>\r\n            <div className=\"collapse-content\">\r\n                {children}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import Modal from \"./Modal/Modal\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport ReCAPTCHA from 'react-google-recaptcha';\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\"\r\n\r\n\r\nexport default function LoadSurveyModal({ setShowLoadSurveyModal }) {\r\n\r\n    const [surveyCode, setSurveyCode] = useState(\"\")\r\n    const [captchaValid, setCaptchaValid] = useState(false)\r\n    const [surveyId, setSurveyId] = useState(null)\r\n    const [showErrorMessage, setShowError] = useState(false)\r\n    const recaptchaRef = useRef(null)\r\n    const captchaOnChange = (response) => {\r\n        axios\r\n            .post(\"http://localhost:5000/verify-captcha\", [response])\r\n            .then((res) => {\r\n                setCaptchaValid(res.data)\r\n            })\r\n            .catch(() => {\r\n                console.log(\"Captcha validation error\")\r\n                setCaptchaValid(false)\r\n            })\r\n    }\r\n\r\n    const loadSurvey = (code) => {\r\n        axios\r\n            .get(\"http://localhost:5000/surveyCodes/\" + code)\r\n            .then((res) => {\r\n                console.log(\"Code matched, surveyId: \" + res.data.surveyId)\r\n                setSurveyId(res.data.surveyId)\r\n                setShowError(false)\r\n            })\r\n            .catch(() => {\r\n                console.log(\"error matching survey code\")\r\n                setShowError(true)\r\n                setSurveyId(null)\r\n                setCaptchaValid(false)\r\n                if (recaptchaRef.current !== null) { recaptchaRef.current.reset() }\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        let button = document.getElementById('load-survey-btn')\r\n        if (captchaValid) {\r\n            button.removeAttribute(\"disabled\", \"\")\r\n            button.classList.remove(\"disabled-button\")\r\n        }\r\n        else {\r\n            button.setAttribute(\"disabled\", \"\")\r\n            button.classList.add(\"disabled-button\")\r\n        }\r\n    }, [captchaValid])\r\n\r\n    return (\r\n        <Modal closeModal={() => setShowLoadSurveyModal(false)} closeable={true}>\r\n            <input\r\n                type=\"text\"\r\n                id=\"survey-code\"\r\n                name=\"surveyCode\"\r\n                placeholder=\"Survey code\"\r\n                onChange={(e) => setSurveyCode((e.target.value).substring(13, e.target.value.length))}\r\n                value={\"Survey code: \" + surveyCode}\r\n            />\r\n            <button id=\"load-survey-btn\" onClick={() => loadSurvey(surveyCode)}>Load</button>\r\n            {showErrorMessage && (\r\n                <p>Code does not match</p>\r\n            )}\r\n            {surveyId === null ?\r\n                <div className=\"captcha\">\r\n                    <ReCAPTCHA\r\n                        ref={recaptchaRef}\r\n                        sitekey=\"6LfSB_IdAAAAAEM7c5gXPgdsDoDMs0vwaMkPLe6p\"\r\n                        onChange={captchaOnChange}\r\n                    />\r\n                </div>\r\n                :\r\n                <Link className=\"results-link\"\r\n                    to={\"/results\"}\r\n                    style={{ color: 'black', display: \"block\" }}\r\n                    state={{ id: surveyId, code: surveyCode }}\r\n                ><button>Go to results</button></Link>\r\n            }\r\n        </Modal>\r\n    )\r\n}\r\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport \"./App.css\";\nimport Modal from \"./Modal/Modal\";\nimport NewQuestion from \"./QuestionCreator/NewQuestion\";\nimport QuestionList from \"./QuestionList/QuestionList\";\nimport { Link } from \"react-router-dom\"\nimport axios from 'axios'\nimport ReCAPTCHA from 'react-google-recaptcha'\nimport ShareModalContent from \"./ShareModalContent\";\nimport CollapsibleButton from \"./CollapsibleButton\";\nimport LoadSurveyModal from \"./LoadSurveyModal\";\n\n\nfunction App() {\n  const [surveyQuestions, setSurveyQuestions] = useState([]);\n  const [showAddQuestionBox, setShowAddQuestionBox] = useState(false)\n  const [surveyTitle, setSurveyTitle] = useState(\"\")\n  const [surveyId, setSurveyId] = useState(\"\")\n  const [surveyDescription, setSurveyDescription] = useState(\"\")\n  const [survey, setSurvey] = useState(\n    {\n      id: \"\",\n      title: \"\",\n      description: \"\",\n      questions: []\n    }\n  )\n  const [photoMap, setPhotoMap] = useState(new Map())\n  const [showFinishModal, setShowFinishModal] = useState(false)\n  const [captchaValid, setCaptchaValid] = useState(false)\n  const [showLoadSurveyModal, setShowLoadSurveyModal] = useState(false)\n  const [surveyCode, setSurveyCode] = useState(null)\n\n  useEffect(() => {\n    setSurvey(prevSurvey => ({\n      ...prevSurvey,\n      title: surveyTitle,\n      description: surveyDescription,\n      questions: surveyQuestions\n    }))\n  }, [surveyTitle, surveyDescription, surveyQuestions])\n\n  const postSurvey = () => {\n    axios\n      .post(\"http://localhost:5000/survey/add\", survey)\n      .then((res) => {\n        console.log(\"Survey posted! Its id is:\" + res.data)\n        setSurveyId(res.data)\n      })\n      .catch(() => {\n        console.log(\"Error\")\n      })\n    setShowFinishModal(true)\n  }\n\n  const postSurveyCode = useCallback(\n    () => {\n      if (surveyId !== \"\") {\n        axios\n          .post(\"http://localhost:5000/surveyCodes/add\", [surveyId])\n          .then((res) => {\n            console.log(\"Survey key generated: \" + res.data)\n            setSurveyCode(res.data)\n          })\n          .catch(() => {\n            console.log(\"error generating survey code\")\n          })\n      }\n    },\n    [surveyId],\n  )\n\n  useEffect(() => {\n    postSurveyCode()\n  }, [postSurveyCode])\n\n  useEffect(() => {\n    if (surveyId !== \"\") {\n      photoMap.forEach((photo, key) => {\n        postImage(photo, surveyId + \":\" + key) //eg. 3m342k2mkkmm2:42223\n      })\n    }\n  }, [surveyId, photoMap])\n\n  const addQuestion = (question) => {\n    setSurveyQuestions((prevQuestions) => {\n      return [...prevQuestions, question]\n    })\n    setShowAddQuestionBox(false)\n  }\n\n  const resetSurvey = () => {\n    if (window.confirm(\"Are you sure you want to reset your survey?\")) {\n      window.location.reload()\n    }\n  }\n\n\n  const everythingCorrect = useCallback(\n    () => {\n      let button = document.getElementsByClassName(\"finish-survey-btn\")[0]\n      if (surveyTitle !== \"\" && surveyDescription !== \"\" && surveyQuestions.length > 0 && captchaValid) {\n        button.removeAttribute(\"disabled\", \"\")\n        button.classList.remove(\"disabled-button\")\n      }\n      else {\n        button.setAttribute(\"disabled\", \"\")\n        button.classList.add(\"disabled-button\")\n      }\n    },\n    [captchaValid, surveyDescription, surveyQuestions.length, surveyTitle],\n  )\n\n  useEffect(() => {\n    everythingCorrect()\n  }, [surveyTitle, surveyDescription, surveyQuestions, captchaValid, everythingCorrect])\n\n  const handleDescriptionInput = () => {\n    let str = document.getElementById(\"description-input\").value\n    setSurveyDescription(str.substring(13, str.length))\n  }\n\n  //img as base64 posting to AWS S3\n  const postImage = (base64Image, imageId) => {\n    axios\n      .post(\n        \"http://localhost:5000/images/add\",\n        [base64Image, imageId]\n      )\n      .then((res) => {\n        console.log(res.data)\n        console.log(\"image posted\")\n      })\n      .catch(() => {\n        console.log(\"Error posting image\")\n      })\n  }\n\n  const captchaOnChange = (response) => {\n    axios\n      .post(\"http://localhost:5000/verify-captcha\", [response])\n      .then((res) => {\n        setCaptchaValid(res.data)\n      })\n      .catch(() => {\n        console.log(\"Captcha validation error\")\n      })\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"top-part\">\n        <h1>QuickShot</h1>\n        <h2>Surveys in no time</h2>\n        <div className=\"survey-title-box\">\n          <input\n            type=\"text\"\n            id=\"title\"\n            name=\"title\"\n            placeholder=\"Survey title\"\n            onChange={(e) => setSurveyTitle((e.target.value).substring(7, e.target.value.length))}\n            value={\"Title: \" + surveyTitle}\n          />\n          <textarea\n            id=\"description-input\"\n            name=\"description-input\"\n            maxLength=\"300\"\n            autoComplete=\"off\"\n            placeholder=\"Survey description\"\n            onInput={handleDescriptionInput}\n            value={\"Description: \" + surveyDescription} />\n        </div>\n        <div className=\"top-buttons\">\n          <button className=\"new-question-btn main-btn\" onClick={() => setShowAddQuestionBox(true)}>Add question</button>\n          <CollapsibleButton buttonText={\"More\"}>\n            <button className=\"main-btn load-btn\" onClick={() => setShowLoadSurveyModal(true)}>Load survey</button>\n            <button className=\"reset-btn main-btn\" onClick={resetSurvey}>Reset</button>\n          </CollapsibleButton>\n        </div>\n      </div >\n\n      <QuestionList questions={surveyQuestions} photoMap={photoMap} />\n      {showAddQuestionBox && (\n        <Modal closeModal={() => setShowAddQuestionBox(false)} closeable={true}>\n          <NewQuestion addQuestion={addQuestion} closeModal={() => setShowAddQuestionBox(false)} photoMap={photoMap} setPhotoMap={setPhotoMap} />\n        </Modal>\n      )}\n      <button className=\"finish-survey-btn main-btn\" onClick={postSurvey}>Finish</button>\n      <div className=\"captcha\">\n        <ReCAPTCHA\n          sitekey=\"6LfSB_IdAAAAAEM7c5gXPgdsDoDMs0vwaMkPLe6p\"\n          onChange={captchaOnChange}\n        />\n      </div>\n      {showFinishModal && (\n        <Modal closeable={false}>\n          <ShareModalContent surveyId={surveyId} />\n          <Link className=\"results-link\"\n            to={\"/results\"}\n            style={{ color: 'black', display: \"block\" }}\n            state={{ id: surveyId, code: surveyCode }}\n          ><button>Go to results</button></Link>\n          <p>This code allows to come back to the results later: <u>{surveyCode}</u></p>\n        </Modal>\n      )}\n      {showLoadSurveyModal && (\n        <LoadSurveyModal setShowLoadSurveyModal={setShowLoadSurveyModal}></LoadSurveyModal>\n      )}\n    </div >\n  );\n}\n\nexport default App;","import { useState } from \"react\"\r\nimport axios from \"axios\"\r\n\r\nexport default function OneImage({ surveyId, answer, index, handleCheckboxClick }) {\r\n\r\n    const [source, setSource] = useState(null)\r\n    const alphabet = \"abcdefghijkl\"\r\n\r\n    axios\r\n        .get(\"http://localhost:5000/images/\" + surveyId + \":\" + answer)\r\n        .then((res) => {\r\n            setSource(res.data)\r\n        })\r\n        .catch((e) => {\r\n            console.log(\"Error getting image: \" + e)\r\n        })\r\n\r\n\r\n    return (\r\n        <div className=\"image-question-box\" key={index}>\r\n            <input type=\"checkbox\" id={\"photo-checkbox\" + index} className=\"photo-checkbox\" name=\"photo-checkbox\" onClick={() => handleCheckboxClick(index)} value={alphabet.charAt(index).toUpperCase()} />\r\n            <label className=\"photo-label\" htmlFor={\"photo-checkbox\" + index}>\r\n                <img src={source} className=\"photo\" alt=\"answer thumbnail\"/>\r\n                <div className=\"overlay\"><span>&#10003;</span></div>\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n","import { useParams } from \"react-router-dom\"\r\nimport { useEffect, useState, useCallback } from \"react\"\r\nimport './ImageQuestion.css'\r\nimport OneImage from \"./OneImage\"\r\n\r\n\r\nexport default function ImageQuestion({ question, questionIndex, answers, setAnswers }) {\r\n\r\n    const [choices, setChoices] = useState([])\r\n    const { id: surveyId } = useParams()\r\n\r\n    const [checkboxAnswers, setCheckboxAnswers] = useState(new Array(question.possibleAnswers.length).fill(null))\r\n    var arr = answers.slice()\r\n\r\n    const handleCheckboxClick = useCallback(\r\n        (index) => {\r\n            let tempArr = checkboxAnswers.slice()\r\n            document.getElementById(\"photo-checkbox\" + index).checked ?\r\n                tempArr[index] = document.getElementById(\"photo-checkbox\" + index).value : tempArr[index] = null\r\n            setCheckboxAnswers(tempArr)\r\n        },\r\n        [checkboxAnswers],\r\n    )\r\n\r\n    useEffect(() => {\r\n        let choicesArr = question.possibleAnswers.map((ans, index) => {\r\n            return <OneImage key={index} surveyId={surveyId} answer={ans} index={index} handleCheckboxClick={handleCheckboxClick} />\r\n        })\r\n        setChoices(choicesArr)\r\n    }, [question, handleCheckboxClick, surveyId])\r\n\r\n    useEffect(() => {\r\n        arr[questionIndex] = checkboxAnswers\r\n        setAnswers(arr)\r\n    }, [checkboxAnswers, questionIndex])\r\n\r\n    return (\r\n        <div className=\"question-container\">\r\n            <h4>{question.title}</h4>\r\n            <div className=\"photo-choices-grid-container\">\r\n                {choices}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport './MultiQuestion.css'\r\n\r\nexport default function MultiQuestion({ question, questionIndex, answers, setAnswers }) {\r\n\r\n    const alphabet = \"abcdefghijkl\"\r\n\r\n    var arr = answers.slice()\r\n\r\n    const [checkboxAnswers, setCheckboxAnswers] = useState(new Array(question.possibleAnswers.length).fill(null))\r\n\r\n\r\n    const handleCheckboxClick = (index) => {\r\n        console.log(index)\r\n        let tempArr = checkboxAnswers.slice()\r\n        document.getElementById(\"answer-checkbox\" + index + questionIndex).checked ?\r\n            tempArr[index] = document.getElementById(\"answer-checkbox\" + index + questionIndex).value : tempArr[index] = null\r\n        console.log(tempArr)\r\n        setCheckboxAnswers(tempArr)\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        arr[questionIndex] = checkboxAnswers\r\n        setAnswers(arr)\r\n    }, [checkboxAnswers, questionIndex, checkboxAnswers])\r\n\r\n    const choices = question.possibleAnswers.map((answer, ind) => {\r\n        return (\r\n            <div className=\"one-checkbox-answer\" key={ind}>\r\n                <label className=\"multiquestion-label\" htmlFor={\"answer-checkbox\" + ind}>{answer + \" \"}</label>\r\n                <input type=\"checkbox\" id={\"answer-checkbox\" + ind + questionIndex} name=\"answer-checkbox\" onClick={() => handleCheckboxClick(ind)} value={alphabet.charAt(ind).toUpperCase()} />\r\n            </div>)\r\n    })\r\n\r\n    return (\r\n        <div className=\"question-container\">\r\n            <h4>{question.title}</h4>\r\n            {choices}\r\n        </div>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport \"./Survey.css\"\r\n\r\nexport default function OpenQuestion({ question, questionIndex, answers, setAnswers }) {\r\n    const [answerInput, setAnswerInput] = useState('')\r\n    var arr = answers.slice()\r\n\r\n    const handleAnswerInput = () => {\r\n        setAnswerInput(document.getElementById(\"answer-box\" + questionIndex).value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        arr[questionIndex] = answerInput\r\n        setAnswers(arr)\r\n    }, [answerInput, questionIndex])\r\n\r\n    return (\r\n        <div className=\"question-container\">\r\n            <label htmlFor=\"answerBox\"><h4>{question.title}</h4></label>\r\n            <textarea className=\"answer-text-area\" maxLength=\"300\" autoComplete=\"off\" placeholder=\"Answer here\" id={\"answer-box\" + questionIndex} name=\"answerBox\" onInput={handleAnswerInput} />\r\n        </div>\r\n    )\r\n}\r\n","import ImageQuestion from \"./ImageQuestion\";\r\nimport MultiQuestion from \"./MultiQuestion\";\r\nimport OpenQuestion from \"./OpenQuestion\";\r\n\r\nexport default function List({ questions, answers, setAnswers}) {\r\n\r\n    const questionElems = questions.map((question, index) => {\r\n        switch (question.type) {\r\n            case \"choice\":\r\n                return <MultiQuestion key={index} questionIndex={index} question={question} answers={answers} setAnswers={setAnswers}></MultiQuestion>\r\n            case \"openQuestion\":\r\n                return <OpenQuestion key={index} questionIndex={index} question={question} answers={answers} setAnswers={setAnswers}></OpenQuestion>\r\n            case \"imageQuestion\":\r\n                return <ImageQuestion key={index} questionIndex={index} question={question} answers={answers} setAnswers={setAnswers}></ImageQuestion>\r\n            default:\r\n                return <p>There was an issue</p>\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            {questionElems}\r\n        </div>\r\n    )\r\n}\r\n","import axios from 'axios';\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport Modal from '../Modal/Modal';\r\nimport List from './List';\r\nimport './Survey.css';\r\nimport ReCAPTCHA from 'react-google-recaptcha';\r\nimport '../App.css';\r\n\r\n\r\nexport default function Survey() {\r\n\r\n    const [survey, setSurvey] = useState([])\r\n    const [answers, setAnswers] = useState([])\r\n    const [questions, setQuestions] = useState([])\r\n    const [showModal, setShowModal] = useState(false)\r\n\r\n    const [showQuestions, setShowQuestions] = useState(false)\r\n    const [answersSent, setAnswersSent] = useState(false)\r\n    const [captchaValid, setCaptchaValid] = useState(false)\r\n\r\n\r\n    //gets id of particular survey from url\r\n    const { id } = useParams()\r\n\r\n\r\n    const getSurvey = useCallback(\r\n        () => {\r\n            axios\r\n                .get(\"http://localhost:5000/survey/\" + id)\r\n                .then((res) => {\r\n                    setSurvey(res.data)\r\n                    setShowQuestions(true)\r\n                })\r\n                .catch(() => {\r\n                    console.log(\"error\")\r\n                })\r\n        },\r\n        [id],\r\n    )\r\n\r\n    useEffect(() => {\r\n        getSurvey()\r\n    }, [getSurvey])\r\n\r\n    const postAnswers = () => {\r\n        axios\r\n            .post(\r\n                \"http://localhost:5000/answers/add\",\r\n                { answerSet: answers, surveyId: id }\r\n            )\r\n            .then((res) => {\r\n                console.log(res)\r\n                console.log(\"answers posted\")\r\n                setAnswersSent(true)\r\n            })\r\n            .catch(() => {\r\n                console.log(\"Error posting answers\")\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (survey !== null) setQuestions(survey.questions)\r\n    }, [survey])\r\n\r\n    useEffect(() => {\r\n        try {\r\n            setAnswers(new Array(questions.length).fill(null))\r\n        } catch (e) {\r\n            console.log(\"array not yet filled\")\r\n        }\r\n    }, [questions])\r\n\r\n    const handleFinishSurvey = () => {\r\n        let allAnswersFilled = true\r\n        answers.forEach((answer) => {\r\n            if (answer === null) allAnswersFilled = false\r\n        })\r\n        allAnswersFilled ? setShowModal(true) : setShowModal(false)\r\n    }\r\n\r\n    const everythingCorrect = useCallback(\r\n        () => {\r\n            let button = document.getElementsByClassName(\"finish-btn\")[0]\r\n            let allAnswersFilled = true\r\n            if (answers !== []) {\r\n                answers.forEach((answer) => {\r\n                    if (answer === null || answer === \"\") {\r\n                        allAnswersFilled = false\r\n                    } else {\r\n                        if (Array.isArray(answer)) {\r\n                            if (checkIfArrayIsAllNulls(answer)) allAnswersFilled = false\r\n                        } else {\r\n                            if (checkIfAllWhitespaces(answer)) allAnswersFilled = false\r\n                        }\r\n                    }\r\n                })\r\n            } else allAnswersFilled = false\r\n\r\n            console.log(\"AS: \" + allAnswersFilled)\r\n            if (allAnswersFilled) {\r\n                button.removeAttribute(\"disabled\", \"\")\r\n                button.classList.remove(\"disabled-button\")\r\n            }\r\n            else {\r\n                button.setAttribute(\"disabled\", \"\")\r\n                button.classList.add(\"disabled-button\")\r\n            }\r\n        },\r\n        [answers],\r\n    )\r\n\r\n    useEffect(() => {\r\n        if (survey !== null) everythingCorrect()\r\n    }, [survey, everythingCorrect])\r\n\r\n    const checkIfAllWhitespaces = (str) => {\r\n        //could be improved, other loop would be better\r\n        let isAllWhitespaces = true\r\n        Array.from(str).forEach((char) => {\r\n            if (char !== \" \") isAllWhitespaces = false\r\n        })\r\n        return isAllWhitespaces\r\n    }\r\n\r\n    const checkIfArrayIsAllNulls = (arr) => {\r\n        //same as above\r\n        let isNull = true\r\n        arr.forEach((item) => {\r\n            if (item !== null) isNull = false\r\n        })\r\n        return isNull\r\n    }\r\n\r\n    const captchaOnChange = (response) => {\r\n        axios\r\n            .post(\"http://localhost:5000/verify-captcha\", [response])\r\n            .then((res) => {\r\n                setCaptchaValid(res.data)\r\n            })\r\n            .catch(() => {\r\n                console.log(\"Captcha validation error\")\r\n            })\r\n    }\r\n\r\n    const handleCloseCaptchaModal = () => {\r\n        window.grecaptcha.reset();\r\n        setCaptchaValid(false)\r\n        setShowModal(false)\r\n    }\r\n\r\n    console.log(showModal)\r\n    return (\r\n        <div className=\"survey-view\">\r\n            <div className=\"top-part\">\r\n                <h1 className=\"site-title\">QuickShot</h1>\r\n                <h2 className=\"description\">Surveys in no time</h2>\r\n                {survey !== null && (\r\n                    <div className=\"survey-title-box\">\r\n                        <h3 className=\"survey-title\">Survey title: {(survey !== null) && survey.title}</h3>\r\n                        <span className=\"survey-description\">Description: {(survey !== null) && survey.description}</span>\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <button onClick={() => console.log(answers)}>ss</button>\r\n\r\n            {survey !== null ?\r\n                <div>\r\n                    {showQuestions ? (\r\n                        <List questions={questions} answers={answers} setAnswers={setAnswers} />\r\n                    ) : <span>Loading...</span>}\r\n                    <button className='finish-btn' onClick={handleFinishSurvey}>Finish</button>\r\n                </div>\r\n                :\r\n                <p className=\"no-survey-message\">Survey does not exist.</p>\r\n            }\r\n\r\n\r\n            {showModal && (\r\n                answersSent ?\r\n                    (<Modal closeable={false}>\r\n                        <h3>Thank you!</h3>\r\n                    </Modal>)\r\n                    :\r\n                    (<Modal closeModal={handleCloseCaptchaModal} closeable={true}>\r\n                        <div className=\"captcha\">\r\n                            <ReCAPTCHA\r\n                                sitekey=\"6LfSB_IdAAAAAEM7c5gXPgdsDoDMs0vwaMkPLe6p\"\r\n                                onChange={captchaOnChange}\r\n                            />\r\n                        </div>\r\n                        {captchaValid && <button className='final-send-btn' onClick={postAnswers}>Send Answers</button>}\r\n                    </Modal>\r\n                    )\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import axios from \"axios\"\r\nimport { useState } from \"react\"\r\n\r\nexport default function Image({ surveyId, answer, answersCount, totalVotes, labels, index }) {\r\n\r\n    const [source, setSource] = useState(null)\r\n\r\n    axios\r\n        .get(\"http://localhost:5000/images/\" + surveyId + \":\" + answer)\r\n        .then((res) => {\r\n            setSource(res.data)\r\n        })\r\n        .catch((e) => {\r\n            console.log(\"Error getting image: \" + e)\r\n        })\r\n\r\n\r\n    return (\r\n        <div className='photo-grid-element'>\r\n            <p>{labels[index] + \": \" + ((answersCount[index] / totalVotes) * 100).toFixed(0) + \"%\"}</p>\r\n            <img className='photo' src={source} alt=\"answer thumbnail\"/>\r\n        </div>\r\n    )\r\n}\r\n","import 'chart.js/auto';\r\nimport { useState, useEffect } from 'react';\r\nimport { Pie } from 'react-chartjs-2'\r\nimport './Results.css'\r\nimport './CloseQuestionResult.css'\r\nimport Image from './Image';\r\n\r\nexport default function CloseQuestionResult({ question, answers, id }) {\r\n\r\n    const [answersCount, setAnswersCount] = useState(null)\r\n\r\n    const alphabet = Array.from(\"ABCDEFGH\")\r\n    const labels = alphabet.slice(0, question.possibleAnswers.length)\r\n\r\n    const [possibleAnswers, setPossibleAnswers] = useState(null)\r\n    const [totalVotes, setTotalVotes] = useState(0)\r\n\r\n    useEffect(() => {\r\n        if (answers !== undefined) {\r\n            let answersCountArray = new Array(labels.length)\r\n            answersCountArray.fill(0, 0, labels.length + 1)\r\n            let k = 0\r\n            labels.forEach((label) => {\r\n                for (var i = 0; i < answers.length; i++) {\r\n                    for (var j = 0; j < answers[i].length; j++) {\r\n                        if (answers[i][j] === label) {\r\n                            answersCountArray[k]++\r\n                        }\r\n                    }\r\n                }\r\n                k++\r\n            })\r\n            setAnswersCount(answersCountArray)\r\n            //for example if there are 3 As chosen and 6 Bs, answersCount will be [3, 6]\r\n        }\r\n    }, [answers])\r\n\r\n    useEffect(() => {\r\n        if (answersCount !== null) {\r\n            let sum = 0\r\n            answersCount.forEach((item) => {\r\n                sum = sum + item\r\n            })\r\n            setTotalVotes(sum)\r\n        }\r\n    }, [answersCount])\r\n\r\n    const data = {\r\n        labels: labels,\r\n        datasets: [\r\n            {\r\n                label: question.title,\r\n                backgroundColor: [\r\n                    '#ddff00',\r\n                    '#e6200e',\r\n                    '#1ce80e',\r\n                    '#140dde',\r\n                    '#db2580',\r\n                    '#39dbb3',\r\n                    '#a8a492',\r\n                    '#512361'\r\n                ],\r\n                hoverBackgroundColor: [\r\n                    '#5f691e',\r\n                    '#871f16',\r\n                    '#1b7515',\r\n                    '#141169',\r\n                    '#6b1540',\r\n                    '#277562',\r\n                    '#474640',\r\n                    '#34183d'\r\n                ],\r\n                hoverOffset: 15,\r\n                data: answersCount\r\n            }\r\n        ]\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (answersCount !== null && totalVotes !== 0) {\r\n            let possibleAns;\r\n            if (question.type === 'imageQuestion') {\r\n                possibleAns = question.possibleAnswers.map((ans, index) => {\r\n                    console.log(ans)\r\n                    return <Image key={index} surveyId={id} answer={ans} answersCount={answersCount} totalVotes={totalVotes} labels={labels} index={index}></Image>\r\n                })\r\n            } else {\r\n                possibleAns = question.possibleAnswers.map((ans, index) => {\r\n                    return <p key={index}>{labels[index] + \": \" + ans + \" - \" + ((answersCount[index] / totalVotes) * 100).toFixed(0)+ \"%\"}</p>\r\n                })\r\n            }\r\n            setPossibleAnswers(possibleAns)\r\n        }\r\n    }, [answersCount, totalVotes, id, question])\r\n\r\n    return (\r\n\r\n        <div className=\"question-container\">\r\n            <h4 className='question-title'>{question.title}</h4>\r\n            <div className='grid-container'>\r\n                <div className={` left-section ${(question.type === \"imageQuestion\") ? \"photo-question-grid\" : \"\"}`}>\r\n                    {(possibleAnswers !== null) ? possibleAnswers : <p>Loading...</p>}\r\n                </div>\r\n                <div className='right-section'>\r\n                    <Pie\r\n                        data={data}\r\n                        options={{\r\n                            title: {\r\n                                display: true,\r\n                                text: question.title,\r\n                                fontSize: 20\r\n                            },\r\n                            legend: {\r\n                                display: true,\r\n                                position: 'right'\r\n                            },\r\n                            responsive: true,\r\n                            layout: {\r\n                                padding: {\r\n                                    bottom: 7\r\n                                }\r\n                            }\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport default function OpenQuestionResult({ question, answers }) {\r\n\r\n    const [answersArray, setAnswersArray] = useState(null)\r\n\r\n    useEffect(() => {\r\n        let answerList = answers.map((ans, index) => {\r\n            return <div className=\"open-question-answer\" key={index}>{index + 1 + \". \" + ans}</div>\r\n        })\r\n        setAnswersArray(answerList)\r\n    }, [answers])\r\n\r\n    return (\r\n        <div className=\"question-container\">\r\n            <h4>{question.title}</h4>\r\n            <div className=\"open-question-results\">\r\n                {answersArray !== null ? answersArray : <p>Loading...</p>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import axios from \"axios\"\r\nimport { useState, useEffect, useCallback } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport CollapsibleButton from \"../CollapsibleButton\";\r\nimport Modal from \"../Modal/Modal\";\r\nimport ShareModalContent from \"../ShareModalContent\";\r\nimport CloseQuestionResult from \"./CloseQuestionResult\";\r\nimport OpenQuestionResult from \"./OpenQuestionResult\";\r\n\r\nexport default function Results() {\r\n\r\n    const [answers, setAnswers] = useState([])\r\n    const [survey, setSurvey] = useState(null)\r\n    const [showResults, setShowResults] = useState(false)\r\n    const [results, setResults] = useState(null)\r\n    const [finalAnswers, setFinalAnswers] = useState([])\r\n\r\n    const [fetchData, setFetchData] = useState(true)\r\n    const [id, setId] = useState(null)\r\n    const [code, setCode] = useState(null)\r\n    const location = useLocation()\r\n\r\n    const [showDeletionModal, setShowDeletionModal] = useState(false)\r\n    const [imageIds, setImageIds] = useState([])\r\n    const [deletionCompleted, setDeletionCompleted] = useState(false)\r\n    const [showShareModal, setShowShareModal] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (location.state !== null) {\r\n            let { id } = location.state\r\n            let { code } = location.state\r\n            setId(id)\r\n            setCode(code)\r\n        }\r\n    }, [location.state])\r\n\r\n\r\n    const fetchAnswers = useCallback(\r\n        () => {\r\n            axios\r\n                .get(\"http://localhost:5000/answers/\" + id)\r\n                .then((res) => {\r\n                    let answerDocuments = res.data\r\n                    makeAnswersArray(answerDocuments)\r\n                })\r\n                .catch((e) => {\r\n                    console.log(\"error: \" + e)\r\n                })\r\n        },\r\n        [id],\r\n    )\r\n\r\n    useEffect(() => {\r\n        setFetchData(false)\r\n        fetchAnswers()\r\n    }, [fetchData, fetchAnswers])\r\n\r\n    useEffect(() => {\r\n        if (id !== null) {\r\n            setFetchData(false)\r\n            axios\r\n                .get(\"http://localhost:5000/survey/\" + id)\r\n                .then((res) => {\r\n                    setSurvey(res.data)\r\n                })\r\n                .catch(() => {\r\n                    console.log(\"error\")\r\n                })\r\n        }\r\n    }, [fetchData, id])\r\n\r\n    const makeAnswersArray = (answerDocuments) => {\r\n        let newAnswers = []\r\n        answerDocuments.forEach((document) => {\r\n            newAnswers.push(document.answers)\r\n        })\r\n        setAnswers(newAnswers)\r\n    }\r\n\r\n    //to get an array of arrays where each array is set of answers for one question, \r\n    //eg. finalAnswers[0] will be array of answers for first question gathered from all the answer documents\r\n    useEffect(() => {\r\n        if (answers !== null && answers[0] !== undefined) {\r\n            let ans = []\r\n            let numberOfQuestions = 0\r\n            answers[0].forEach(() => {\r\n                numberOfQuestions++\r\n            })\r\n            for (var i = 0; i < numberOfQuestions; i++) {\r\n                ans[i] = []\r\n            }\r\n            answers.forEach((answerSet) => {\r\n                let i = 0\r\n                answerSet.forEach((answer) => {\r\n                    ans[i].push(answer)\r\n                    i++\r\n                })\r\n            })\r\n            setFinalAnswers(ans)\r\n        }\r\n    }, [answers])\r\n\r\n    const createResults = useCallback(\r\n        () => {\r\n            if (survey !== null && answers[0] !== undefined && finalAnswers !== []) {\r\n                console.log(\"FI\" + finalAnswers[3])\r\n                let res = survey.questions.map((question, index) => {\r\n                    if (finalAnswers[index] !== undefined) {\r\n                        switch (question.type) {\r\n                            case \"choice\": return <CloseQuestionResult key={index} question={question} answers={finalAnswers[index]} />\r\n                            case \"imageQuestion\": return <CloseQuestionResult key={index} question={question} answers={finalAnswers[index]} id={id} />\r\n                            case \"openQuestion\": return <OpenQuestionResult key={index} question={question} answers={finalAnswers[index]} />\r\n                            default: return <p>There was an issue.</p>\r\n                        }\r\n                    }\r\n                })\r\n                setResults(res)\r\n                setShowResults(true)\r\n            }\r\n        },\r\n        [answers, finalAnswers, id, survey],\r\n    )\r\n\r\n    useEffect(() => {\r\n        if (answers !== undefined) createResults()\r\n    }, [createResults])\r\n\r\n    const deleteSurvey = () => {\r\n        //delete survey\r\n        axios\r\n            .delete('http://localhost:5000/survey/delete/' + id)\r\n            .then((res) => {\r\n                console.log(res)\r\n            })\r\n            .catch((e) => {\r\n                console.log(\"Survey deletion error: \" + e)\r\n            })\r\n\r\n        //delete all answers for this survey\r\n        axios\r\n            .delete('http://localhost:5000/answers/delete/' + id)\r\n            .then((res) => {\r\n                console.log(res)\r\n            })\r\n            .catch((e) => {\r\n                console.log(\"answers deletion error: \" + e)\r\n            })\r\n\r\n        //https://github.com/axios/axios/issues/897#issuecomment-343715381\r\n        //won't fire if there weren't any images\r\n        if (imageIds.length >= 2) {\r\n            axios\r\n                .delete('http://localhost:5000/images/delete/' + id, { data: imageIds })\r\n                .then((res) => {\r\n                    console.log(res)\r\n                })\r\n                .catch((e) => {\r\n                    console.log(\"images deletion error: \" + e)\r\n                })\r\n        }\r\n        //I assume eveything works\r\n        setDeletionCompleted(true)\r\n    }\r\n\r\n    const storeImageIds = useCallback(\r\n        () => {\r\n            survey.questions.forEach((question) => {\r\n                if (question.type === \"imageQuestion\") {\r\n                    question.possibleAnswers.forEach((ans) => {\r\n                        setImageIds(oldImageIds => [...oldImageIds, ans])\r\n                    })\r\n                }\r\n            })\r\n        },\r\n        [survey]\r\n    )\r\n\r\n    useEffect(() => {\r\n        if (survey !== null && imageIds < 2) {\r\n            storeImageIds()\r\n        }\r\n    }, [survey, imageIds, storeImageIds])\r\n\r\n    const handleCloseDeletionModal = () => {\r\n        setShowDeletionModal(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"top-part\">\r\n                <h1 className=\"site-title\">QuickShot</h1>\r\n                <h2 className=\"description\">Surveys in no time</h2>\r\n                {(survey !== null) && (\r\n                    <div>\r\n                        <div className=\"survey-title-box\">\r\n                            <h3 className=\"survey-title\">Survey title: {(survey !== null) && survey.title}</h3>\r\n                            <span className=\"survey-description\">Description: {(survey !== null) && survey.description}</span>\r\n                        </div>\r\n                        <div className=\"sur-buttons\">\r\n                            <button className=\"fetch-btn\" onClick={() => setFetchData(true)}>Fetch results</button>\r\n                            <CollapsibleButton buttonText={\"More\"}>\r\n                                <button className=\"delete-survey-btn\" onClick={() => setShowDeletionModal(true)}>Delete survey</button>\r\n                                <button className=\"share-btn\" onClick={() => setShowShareModal(true)}>Share</button>\r\n                            </CollapsibleButton>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n            {(survey == null) ? <p className=\"no-survey-message\">Survey does not exist.</p> :\r\n                (<div className=\"result-list\">\r\n                    {showResults ? results : <p>No answers yet</p>}\r\n                    {showDeletionModal && (\r\n                        !deletionCompleted ?\r\n                            (<Modal closeModal={handleCloseDeletionModal} closeable={true}>\r\n                                <p>This action is irreversible</p>\r\n                                <button className=\"delete-survey-btn\" onClick={deleteSurvey}>Delete survey</button>\r\n                                <p className=\"additional-warning\">Survey data will be permanently deleted</p>\r\n                            </Modal>)\r\n                            :\r\n                            (<Modal closeable={false}>\r\n                                <p>Deletion completed!</p>\r\n                            </Modal>)\r\n                    )}\r\n                </div>)}\r\n            {showShareModal && (\r\n                <Modal closeable={true} closeModal={() => setShowShareModal(false)}>\r\n                    <ShareModalContent surveyId={id} />\r\n                </Modal>\r\n            )}\r\n\r\n            {(survey !== null) && <p>This code allows to come back to the results later: <b>{code}</b></p>}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Survey from './Survey/Survey';\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\"\nimport Results from './Results/Results';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<App/>}/>\n        <Route path=\"/survey/:id\" element={<Survey/>}/>\n        {/* <Route path=\"/results/:id\" element={<Results/>}/> */}\n        <Route path=\"/results\" element={<Results/>}/>\n      </Routes>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}